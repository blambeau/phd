# Titre

Synthesizing Multi-View Models of Software Systems

# Titre abrégé pour la tranche (max. 80 caractères espaces compris)

Synthesizing Multi-View Models of Software Systems

# Nom et prénom de l’auteur

Lambeau Bernard

# Coordonnées complètes (faculté, département, unité, adresse, tél., fax, mail, 
  site web)

* Institute of Information & Communication Technologies, Electronics and Applied Mathematics (ICTEAM institute)
* Computing Science Engineering
* Batiment Réaumur
  Place Sainte Barbe 2 bte L5.02.01
  1348 Louvain-la-Neuve
* Tél: 010 47 31 50
* Fax: 010 45 03 45
* Mail: bernard.lambeau@uclouvain.be

# Date

November 2011

# Résumé court

Models play a significant role for analyzing requirements and exploring designs of software systems. Good models should focus on key aspects of the target system while abstracting from numerous details. The joint use of multiple modeling languages allows analysts to capture complementary system views in a complete, precise, and consistent way. Such models prove difficult to build in practice. Techniques and tools are therefore required for supporting analysts in this task.

Model synthesis techniques may help in building models systematically from various sources of knowledge about the target system. Such techniques may integrate dedicated checks on the models being built. Early errors can thereby be detected and fixed. Model synthesis can also produce missing model fragments, support documentation, or generate code fragments for specific software components.

The thesis proposes tool-supported synthesis techniques for multi-view models involving scenarios, state machines, processes, and goals. 

A formal trace semantics is provided for process models together with algorithms for deriving state machines from them. This enables a variety of checks on processes, including the verification that they satisfy desired properties.

An interactive technique is then presented for synthesizing behavior models from scenarios. A grammar induction framework is extended to generalize examples of desired behavior under the control of counterexamples and goals to be met by the system. The induction process interacts with the end-user who needs to classify additional scenarios generated by the synthesizer as positive or negative examples of desired system behavior.

The proposed techniques are implemented by a toolset, whose architecture is briefly described. Our inductive synthesizer has been evaluated in depth on various case studies and on synthetic datasets. These evaluations resulted in an online protocol and platform for evaluating inductive synthesis techniques.

# Numéro de collection

344

